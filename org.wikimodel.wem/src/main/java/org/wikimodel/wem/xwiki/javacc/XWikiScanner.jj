options
{
    STATIC = false;
    UNICODE_INPUT = true;
    // Uncomment below for debugging
    //DEBUG_PARSER = true;
    //DEBUG_LOOKAHEAD = true;
    //DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(XWikiScanner)
/*******************************************************************************
 * Copyright (c) 2005,2007 Cognium Systems SA and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution, and is available at
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Contributors:
 *     Cognium Systems SA - initial API and implementation
 *******************************************************************************/
package org.wikimodel.wem.xwiki.javacc;

import org.wikimodel.wem.IWikiReferenceParser;
import org.wikimodel.wem.WikiParameters;
import org.wikimodel.wem.WikiStyle;
import org.wikimodel.wem.impl.IWikiScannerContext;
import org.wikimodel.wem.WikiReference;
import org.wikimodel.wem.impl.WikiScannerUtil;
import org.wikimodel.wem.xwiki.XWikiReferenceParser;

/**
 * This is the internal wiki page parser generated from the grammar file.
 * 
 * @author kotelnikov
 */
public class XWikiScanner {

    private IWikiScannerContext fContext;

    private IWikiReferenceParser fReferenceParser = new XWikiReferenceParser();

    /**
     * Count number of empty lines to send when we emit the onEmptyLines event.
     * We need to count them since the number we send depend on the next block
     * element. For all block elements other than paragraph we send one more
     * empty lines since these blocks are recognized by the lexer as NewLine
     * token followed by the token for the element and thus that "eats" one
     * NewLine which is why we need to add it again.
     */
    private int emptyLinesCount = 0;

    public void parse(IWikiScannerContext context) throws ParseException {
        fContext = context;
        doParse();
    }

    protected WikiParameters newWikiParameters(String str) {
        str = WikiScannerUtil.extractSubstring(str, "(%", "%)", '~');
        return new WikiParameters(str);
    }
    
}

PARSER_END(XWikiScanner)

TOKEN_MGR_DECLS: {
    int verbatimBlockDepth = 0;
    int tableDepth = 0; 
    String macroName = "";
    int macroDepth = 0;
    void initMacro(StringBuffer buf) {
        macroName = getMacroName(buf);
        macroDepth = 1;
    }
    String getMacroName(StringBuffer buf) {
        String str = buf.toString();
        str = str.trim();
        str = str.substring(2, str.length() - 2);
        int idx = str.indexOf(" ");
        if (idx > 0) {
            str = str.substring(0, idx);
        }
        return str;
    }
}

<VERBATIM_CONTEXT> TOKEN:
{
      <INTERNAL_VERBATIM_START: <VERBATIM_START> > { verbatimBlockDepth++; } : VERBATIM_CONTEXT
    | <INTERNAL_VERBATIM_END: <VERBATIM_END> > {
            verbatimBlockDepth--;
            if (verbatimBlockDepth == 0)  {
                SwitchTo(INITIAL_CONTEXT);
            } else {
                SwitchTo(VERBATIM_CONTEXT);
            }
        }
    | <INTERNAL_VERBATIM_CONTENT: <VERBATIM_CONTENT> > : VERBATIM_CONTEXT
}

<MACRO_CONTEXT> TOKEN:
{
    <INTERNAL_MACRO_START: <MACRO_START> > {
        {
            String name = getMacroName(image); 
            if (name.equals(macroName)) {
                macroDepth++;
            }      
        }
    } : MACRO_CONTEXT
    | <INTERNAL_MACRO_END: <MACRO_END> > {
        {
            String name = getMacroName(image); 
            int context = MACRO_CONTEXT;
            if (name.startsWith("/" + macroName)) {
                macroDepth--;
                if (macroDepth == 0) {
                    context = INITIAL_CONTEXT;
                }
            }
            SwitchTo(context);
        }
    }
    | <INTERNAL_MACRO_CONTENT: <MACRO_CONTENT> > : MACRO_CONTEXT
}

<DEFAULT, INITIAL_CONTEXT> TOKEN:
{
      <#LI: (<SPACE>)* ( ("*")+ (":" | ";")* | ( "1" | "*" )+ "." (":" | ";")* | (":" | ";")+ ) (<SPACE>) >
    | <#HEADER: (<SPACE>)* ("=")+ >
    | <#BR: "\\\\" >
    | <#DOC_BEGIN: (<SPACE>)* "(((" (<SPACE>)* >
    | <#DOC_END:   (<SPACE>)* ")))" (<SPACE>)* >
    | <#VERBATIM_START: "{{{" >
    | <#VERBATIM_END: "}}}" (<NEW_LINE>)? > 
    | <#VERBATIM_CONTENT: ( 
          "~" ~[]
        | ~["}", "{", "~"] 
        | "}" ~["}"] | "}}" ~["}"]
        | "{" ~["{"] | "{{" ~["{"]
      )+ >
    | <#MACRO_NAME: ( <URI> | (<XWIKI_CHAR>)+ ) >
    | <#MACRO_DEF: ( "~" ~[] | ~["}"] | "}" ~["}"] )* >
    | <#MACRO_EMPTY: "{{" <MACRO_NAME> <MACRO_DEF> "/}}" >
    | <#MACRO_START: "{{" <MACRO_NAME> <MACRO_DEF> "}}" >
    | <#MACRO_END: "{{/" <MACRO_NAME> (<SPACE>)* "}}" > 
    | <#MACRO_CONTENT: ( <XWIKI_CHAR> | <SPACE> |<NEW_LINE> | <XWIKI_SPECIAL_SYMBOL> ) >
    | <#REFERENCE_IMAGE: "[[image:" ("~" ~[] | ~["]"] | "]" ~["]"] )* "]]" >
    | <#REFERENCE:  ( "[[" ( <REFERENCE_IMAGE> | "~" ~[] | ~["]"] | "]" ~["]"] )* "]]" ) >
    | <#HORLINE: "---" ("-")+ >
    | <#PARAMS:   "(%" ( "~" ~[] | ~["%"] | ["%"] ~[")"] )* "%)" >
    | <#CELL: ( "|=" | "|" | "!=" | "!!" ) (<PARAMS>)? >
    | <#QUOT_LINE: (">")+ >
	| <#FORMAT_SYMBOL: ("//" | "**" | "__" | "--" | "^^" | ",," | "##") >
	
	| <#XWIKI_URI: ( ( <XWIKI_URI_URIS> ( <URI_PATH_ABSOLUTE> | <URI_PATH_ROOTLESS> ) ) | <URI_SCHEME_COMPOSITE> "://" <URI_AUTHORITY> <URI_PATH_ABEMPTY> ) ("?" <URI_QUERY>)? ("#" <URI_FRAGMENT>)? >
	| <#XWIKI_URI_URIS: "mailto:" | "attach:" | "image:" >
	| <#XWIKI_SPECIAL_SYMBOL: <SPECIAL_SYMBOL> | "~" <SPECIAL_SYMBOL> >
	| <#XWIKI_CHAR: <CHAR> | "~" <CHAR> >
	| <#XWIKI_SPACE: <SPACE> | "~" <SPACE> >
// <common-tokens>
    // =========================================================================
    // New lines, spaces, special symbols and characters definitions
    // =========================================================================
    | <#NEW_LINE : "\r\n" | "\r" | "\n" >
    | <#SPACE : [" ", "\t"] >
      // All special symbols from the range 0-127
    | <#SPECIAL_SYMBOL : [
        "!",     "\"",     "#",     "$",     "%",     "&",     "'",     "(",  
        ")",     "*",      "+",     ",",     "-",     ".",     "/",     ":",  
        ";",     "<",      "=",     ">",     "?",     "@",     "[",     "\\", 
        "]",     "^",      "_",     "`",     "{",     "|",     "}",     "~" 
     ] >
      // Characters are defined as all possible symbols excluding special 
      // symbols, spaces and new lines
    | <#CHAR : ~[
        "\t",    "\n",     "\r",    " ",
        "!",     "\"",     "#",     "$",     "%",     "&",     "'",     "(",  
        ")",     "*",      "+",     ",",     "-",     ".",     "/",     ":",  
        ";",     "<",      "=",     ">",     "?",     "@",     "[",     "\\", 
        "]",     "^",      "_",     "`",     "{",     "|",     "}",     "~" 
    ] >
    // =========================================================================
    // URI syntax recognition.
    // =========================================================================
    // This grammar recognize the full URI syntax with following exceptions:
    //  * It has a simplified hier-part definition: it does not contain an empty 
    //    path (so the sequences like "here: " are not recognized as URIs).
    //  * It has a simplified version of the host definition: it does not contain
    //    explicit IP definitions. 
    //  * It parses "extended" URI syntax where "opaque" URIs are treated as 
    //    having multiple schema parts
    //    Example: in an opaque URI like "download:http://www.foo.com/bar.zip"
    //    the part "download:http" is treated as a "composite" scheme part.
    //
    // See also:
    //  * http://tools.ietf.org/html/rfc3986#page-49 - the official URI grammar
    //  * http://en.wikipedia.org/wiki/Uniform_Resource_Identifier
    //  * http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax
    //  * http://www.iana.org/assignments/uri-schemes.html
    // =========================================================================
    | <#URI: <URI_SCHEME_COMPOSITE> ":" <URI_HIER_PART> ("?" <URI_QUERY>)? ("#" <URI_FRAGMENT>)? >

    | <#ALPHA: ( ["A"-"Z", "a"-"z"] )>
    | <#DIGIT: ["0"-"9"]>
    | <#HEXDIG: ( <DIGIT> | ["A"-"F"] | ["a"-"f"] ) >
    | <#URI_GEN_DELIMS: [ ":", "/", "?", "#", "[", "]", "@" ]>

    // Some default can not be accepted in the text - like "," symbols 
    //<#URI_SUB_DELIMS: [ "!", "$", "&", "'", "(", ")", "*", "+", ",", ";", "=" ]>
    | <#URI_SUB_DELIMS: [ "!", "$", "&", "'", "(", ")", "*", "+", /*",",*/ ";", "=" ]>
    | <#URI_UNRESERVED: ( <ALPHA> | <DIGIT> | "-" | "." | "_" | "~" )>
    | <#URI_RESERVED: ( <URI_GEN_DELIMS> | <URI_SUB_DELIMS> ) >
    | <#URI_SCHEME: <ALPHA> ( <ALPHA> | <DIGIT> | "+" | "-" | "." )* >
    | <#URI_SCHEME_COMPOSITE: <URI_SCHEME> ( ":" <URI_SCHEME> )* >
    | <#URI_PCT_ENCODED: "%" <HEXDIG> <HEXDIG> >
    | <#URI_PCHAR_FIRST:  ( <URI_UNRESERVED> | <URI_PCT_ENCODED> | <URI_SUB_DELIMS> ) >
    | <#URI_PCHAR:  ( <URI_PCHAR_FIRST> | ":" | "@" ) >
    | <#URI_QUERY:    ( <URI_PCHAR> | "/" | "?" )* >
    | <#URI_FRAGMENT: ( <URI_PCHAR> | "/" | "?" )* >
      // A simplified hier-part definition: it does not contain an empty path.
    | <#URI_HIER_PART: ( "//" <URI_AUTHORITY> <URI_PATH_ABEMPTY> | <URI_PATH_ABSOLUTE> | <URI_PATH_ROOTLESS> )>
    | <#URI_AUTHORITY: ( <URI_USERINFO> "@" )? <URI_HOST> ( ":" <URI_PORT> )? >
    | <#URI_USERINFO: ( <URI_UNRESERVED> | <URI_PCT_ENCODED> | <URI_SUB_DELIMS> | ":" )* >
    | <#URI_PATH_ABEMPTY: ( "/" <URI_SEGMENT> )* >
    | <#URI_PATH_ABSOLUTE: "/" ( <URI_SEGMENT_NZ> ( "/" <URI_SEGMENT> )* )? >
    | <#URI_PATH_ROOTLESS: <URI_PCHAR_FIRST> <URI_SEGMENT_NZ_NC> ( "/" <URI_SEGMENT> )* >
    | <#URI_SEGMENT: (<URI_PCHAR>)* >
    | <#URI_SEGMENT_NZ: (<URI_PCHAR>)+ >
    | <#URI_SEGMENT_NZ_NC: (<URI_UNRESERVED> | <URI_PCT_ENCODED> | <URI_SUB_DELIMS> | "@")+ >
    | <#URI_PORT: (<DIGIT>)+ >
      // A simplified version of the host: it does not contain explicit IP definitions
    | <#URI_HOST: ( <URI_REG_NAME> ) >
    | <#URI_REG_NAME: ( <URI_UNRESERVED> | <URI_PCT_ENCODED> | <URI_SUB_DELIMS> )* >
    // =========================================================================
// </common-tokens>

}

// We're using 2 contexts: INITIAL_CONTEXT and CONTEXT. The need is to differentiate between block elements and
// inline elements. A block element is normally an element that has a NEW_LINE before itself. However there is a
// case when it's possible to have a block element without a NEW_LINE before and that when the block element is
// located at the start of the document.

<INITIAL_CONTEXT> TOKEN:
{
// <initial-context>
      <I_DOC_BEGIN: <DOC_BEGIN> > : INITIAL_CONTEXT
    | <I_DOC_END: <DOC_END> > : DEFAULT
    | <I_LIST_ITEM: (<NEW_LINE>)? <LI> > : DEFAULT
    | <I_HEADER_BEGIN: (<NEW_LINE>)? <HEADER> (<SPACE>)* > : DEFAULT
    | <I_HEADER_END: <HEADER> > : DEFAULT
    | <I_HORLINE: (<NEW_LINE>)? <HORLINE> > : DEFAULT
    | <I_TABLE_ROW: (<NEW_LINE>)? ( <PARAMS> )? <CELL> > : DEFAULT
    | <I_TABLE_CELL : <CELL> > : DEFAULT 
    | <I_REFERENCE : <REFERENCE> > : DEFAULT
    | <I_VERBATIM_START: <VERBATIM_START> > { verbatimBlockDepth++; } : VERBATIM_CONTEXT
    | <I_MACRO_EMPTY_BLOCK: (<NEW_LINE>)? <MACRO_EMPTY> > : INITIAL_CONTEXT
    | <I_MACRO_BLOCK_START: (<NEW_LINE>)? <MACRO_START> > { initMacro(image); } : MACRO_CONTEXT
    | <I_MACRO_EMPTY_INLINE: <MACRO_EMPTY> > : DEFAULT
    | <I_MACRO_INLINE_START: <MACRO_START> > { initMacro(image); } : MACRO_CONTEXT
    | <I_FORMAT_SYMBOL : <FORMAT_SYMBOL> > : DEFAULT
    | <I_BR : <BR> > : DEFAULT
    | <I_BLOCK_PARAMS: (<NEW_LINE>)? <PARAMS> > : DEFAULT
    | <I_INLINE_PARAMS: <PARAMS> > : DEFAULT
    | <I_QUOT_LINE: (<NEW_LINE>)? <QUOT_LINE> > : DEFAULT
    | <I_XWIKI_URI: <XWIKI_URI> > : DEFAULT
    | <I_XWIKI_SPACE : ( <XWIKI_SPACE> )+ > : DEFAULT
    
    // "Standard" tokens. They are the same for all wikis.
    | <I_NL: (<NEW_LINE>)? > : DEFAULT
    | <I_WORD : ( <XWIKI_CHAR> )+ > : DEFAULT
    | <I_SPECIAL_SYMBOL : <XWIKI_SPECIAL_SYMBOL> > : DEFAULT
// </initial-context>    
}

<DEFAULT> TOKEN:
{
// <default-context>
      <D_DOC_BEGIN: <DOC_BEGIN> > : INITIAL_CONTEXT
    | <D_DOC_END: <DOC_END> > : DEFAULT
    | <D_LIST_ITEM: <NEW_LINE> <LI> > : DEFAULT
    | <D_HEADER_BEGIN: <NEW_LINE> <HEADER> (<SPACE>)* > : DEFAULT
    | <D_HEADER_END: <HEADER> > : DEFAULT
    | <D_HORLINE: <NEW_LINE> <HORLINE> > : DEFAULT
    | <D_TABLE_ROW: <NEW_LINE> ( <PARAMS> )? <CELL> > : DEFAULT
    | <D_TABLE_CELL : <CELL> > : DEFAULT 
    | <D_REFERENCE : <REFERENCE> > : DEFAULT
    | <D_VERBATIM_START: <VERBATIM_START> > { verbatimBlockDepth++; } : VERBATIM_CONTEXT
    | <D_MACRO_EMPTY_BLOCK: <NEW_LINE> <MACRO_EMPTY> > : INITIAL_CONTEXT
    | <D_MACRO_BLOCK_START: <NEW_LINE> <MACRO_START> > { initMacro(image); } : MACRO_CONTEXT
    | <D_MACRO_EMPTY_INLINE: <MACRO_EMPTY> > : DEFAULT
    | <D_MACRO_INLINE_START: <MACRO_START> > { initMacro(image); } : MACRO_CONTEXT
    | <D_FORMAT_SYMBOL : <FORMAT_SYMBOL> > : DEFAULT
    | <D_BR : <BR> > : DEFAULT
    | <D_BLOCK_PARAMS: <NEW_LINE> <PARAMS> > : DEFAULT
    | <D_INLINE_PARAMS: <PARAMS> > : DEFAULT
    | <D_QUOT_LINE: <NEW_LINE> <QUOT_LINE> > : DEFAULT
    | <D_XWIKI_URI: <XWIKI_URI> > : DEFAULT
    | <D_XWIKI_SPACE : ( <XWIKI_SPACE> )+ > : DEFAULT
    
    // "Standard" tokens. They are the same for all wikis.
    | <D_NL: <NEW_LINE> > : DEFAULT
    | <D_WORD : ( <XWIKI_CHAR> )+ > : DEFAULT
    | <D_SPECIAL_SYMBOL : <XWIKI_SPECIAL_SYMBOL> > : DEFAULT
// </default-context>
}

    Token getINTERNAL_VERBATIM_START(): {Token t=null;} {(t=<INTERNAL_VERBATIM_START>){return t;}}
    Token getINTERNAL_VERBATIM_END(): {Token t=null;} {(t=<INTERNAL_VERBATIM_END>){return t;}}
    Token getINTERNAL_VERBATIM_CONTENT(): {Token t=null;} {(t=<INTERNAL_VERBATIM_CONTENT>){return t;}}
    Token getINTERNAL_MACRO_START(): {Token t=null;} {(t=<INTERNAL_MACRO_START>){return t;}}
    Token getINTERNAL_MACRO_END(): {Token t=null;} {(t=<INTERNAL_MACRO_END>){return t;}}
    Token getINTERNAL_MACRO_CONTENT(): {Token t=null;} {(t=<INTERNAL_MACRO_CONTENT>){return t;}}
// <getters>
    Token getDOC_BEGIN(): {Token t=null;} {(t=<I_DOC_BEGIN>|t=<D_DOC_BEGIN>){return t;}}
    Token getDOC_END(): {Token t=null;} {(t=<I_DOC_END>|t=<D_DOC_END>){return t;}}
    Token getLIST_ITEM(): {Token t=null;} {(t=<I_LIST_ITEM>|t=<D_LIST_ITEM>){return t;}}
    Token getHEADER_BEGIN(): {Token t=null;} {(t=<I_HEADER_BEGIN>|t=<D_HEADER_BEGIN>){return t;}}
    Token getHEADER_END(): {Token t=null;} {(t=<I_HEADER_END>|t=<D_HEADER_END>){return t;}}
    Token getHORLINE(): {Token t=null;} {(t=<I_HORLINE>|t=<D_HORLINE>){return t;}}
    Token getTABLE_ROW(): {Token t=null;} {(t=<I_TABLE_ROW>|t=<D_TABLE_ROW>){return t;}}
    Token getTABLE_CELL(): {Token t=null;} {(t=<I_TABLE_CELL>|t=<D_TABLE_CELL>){return t;}}
    Token getREFERENCE(): {Token t=null;} {(t=<I_REFERENCE>|t=<D_REFERENCE>){return t;}}
    Token getVERBATIM_START(): {Token t=null;} {(t=<I_VERBATIM_START>|t=<D_VERBATIM_START>){return t;}}
    Token getMACRO_EMPTY_BLOCK(): {Token t=null;} {(t=<I_MACRO_EMPTY_BLOCK>|t=<D_MACRO_EMPTY_BLOCK>){return t;}}
    Token getMACRO_BLOCK_START(): {Token t=null;} {(t=<I_MACRO_BLOCK_START>|t=<D_MACRO_BLOCK_START>){return t;}}
    Token getMACRO_EMPTY_INLINE(): {Token t=null;} {(t=<I_MACRO_EMPTY_INLINE>|t=<D_MACRO_EMPTY_INLINE>){return t;}}
    Token getMACRO_INLINE_START(): {Token t=null;} {(t=<I_MACRO_INLINE_START>|t=<D_MACRO_INLINE_START>){return t;}}
    Token getFORMAT_SYMBOL(): {Token t=null;} {(t=<I_FORMAT_SYMBOL>|t=<D_FORMAT_SYMBOL>){return t;}}
    Token getBR(): {Token t=null;} {(t=<I_BR>|t=<D_BR>){return t;}}
    Token getBLOCK_PARAMS(): {Token t=null;} {(t=<I_BLOCK_PARAMS>|t=<D_BLOCK_PARAMS>){return t;}}
    Token getINLINE_PARAMS(): {Token t=null;} {(t=<I_INLINE_PARAMS>|t=<D_INLINE_PARAMS>){return t;}}
    Token getQUOT_LINE(): {Token t=null;} {(t=<I_QUOT_LINE>|t=<D_QUOT_LINE>){return t;}}
    Token getXWIKI_URI(): {Token t=null;} {(t=<I_XWIKI_URI>|t=<D_XWIKI_URI>){return t;}}
    Token getXWIKI_SPACE(): {Token t=null;} {(t=<I_XWIKI_SPACE>|t=<D_XWIKI_SPACE>){return t;}}
    
    // "Standard" tokens. They are the same for all wikis.
    Token getNL(): {Token t=null;} {(t=<I_NL>|t=<D_NL>){return t;}}
    Token getWORD(): {Token t=null;} {(t=<I_WORD>|t=<D_WORD>){return t;}}
    Token getSPECIAL_SYMBOL(): {Token t=null;} {(t=<I_SPECIAL_SYMBOL>|t=<D_SPECIAL_SYMBOL>){return t;}}
// </getters>


void doParse():
{
    token_source.SwitchTo(token_source.INITIAL_CONTEXT);
}
{
    {
        fContext.beginDocument();
    }
    ( docElements() | getDOC_END() )*
    <EOF>
    {
        sendOnEmptyLinesEvent(true);
        fContext.endDocument();
    }
}

void docElements():
{
}
{
    LOOKAHEAD(2) header() 
    |
    LOOKAHEAD(2) table() 
    |
    LOOKAHEAD(2) list()
    |
    // Embedded documents
    embeddedDocument()
    |
    macroBlock()
    |
    // Non-interpreted content
    LOOKAHEAD(3) verbatimBlock()
    |
    // Empty content
    LOOKAHEAD(2) horline()
    |
    (
    LOOKAHEAD(2) 
        quot()
        |
        paragraph()
    )
    | 
    emptyParagraph()
}

void embeddedDocument():
{
    Token t = null;
}
{
    t = getDOC_BEGIN()
    {
        fContext.beginDocument();
    }
    ( docElements() )*
    (
        getDOC_END() | <EOF>
    )
    {
        fContext.endDocument();
    }
}

void header():
{
    Token t = null;
    String str = "";
    WikiParameters params = WikiParameters.EMPTY;
}
{
    ( LOOKAHEAD(2) t = getBLOCK_PARAMS() { str = t.image.trim(); } )?
    {
        params = newWikiParameters(str);
    }
    t = getHEADER_BEGIN()
    {
        sendOnEmptyLinesEvent(true);
        int level = t.image.trim().length();
        fContext.beginHeader(level, params);
    }
    (LOOKAHEAD(2) lines())?
    {
        fContext.endHeader();
    }
}

void table():
{
   Token t = null;
   String str = "";
}
{
    ( LOOKAHEAD(2) t = getBLOCK_PARAMS() { str = t.image.trim(); } )?
    {
        sendOnEmptyLinesEvent(true);
        WikiParameters params = newWikiParameters(str);
        fContext.beginTable(params);
    }
    ( LOOKAHEAD(2) tableRow() )+
    {
        fContext.endTable();
    }
}

void tableRow():
{
    Token t = null;
    WikiParameters rowParams = WikiParameters.EMPTY;
    WikiParameters cellParams = WikiParameters.EMPTY;
    boolean head = false; 
}
{
    t = getTABLE_ROW()
    {
        String str = t.image.trim();
        if (str.startsWith("(%"))  {
            int idx = str.indexOf("%)");
            String p  = str.substring(2, idx); 
            str = str.substring(idx + 2);
            head = (str.startsWith("!=") || str.startsWith("|="));
            rowParams = new WikiParameters(p);
            cellParams = newWikiParameters(str);
        } else {
            head = (str.startsWith("!=") || str.startsWith("|="));
            if (head || str.startsWith("!!")) {
                str = str.substring(2);
            } else {
                str = str.substring(1);
            }
            cellParams = newWikiParameters(str);
        }
        fContext.beginTableRow(head, rowParams, cellParams);
    }
    ( LOOKAHEAD(2) block() )*
    {
        fContext.endTableRow();
    }
}

void list():
{
    String str = "";
    Token t = null;
}
{
    ( LOOKAHEAD(2) t = getBLOCK_PARAMS() { str = t.image.trim(); } )?
    {
        WikiParameters params = newWikiParameters(str);
        sendOnEmptyLinesEvent(true);
        fContext.beginList(params);
    }
    ( LOOKAHEAD(2) listItem() )+
    {
        fContext.endList();
    }
}

void listItem():
{
    Token t = null;
}
{
    (
        t = getLIST_ITEM()
        {
	        String str = t.image.trim();
	        str = str.replace(".", "");
	        str = str.replace('1', '#');
	        fContext.beginListItem(str);
        }
        ( LOOKAHEAD(2) block() )*
        {
            fContext.endListItem();
        }
    )
}

void block():
{
}
{
    ( embeddedDocument() | macroBlock() | lines() )
}

void verbatimBlock():
{ 
    WikiParameters params = WikiParameters.EMPTY;
    Token t = null;
}
{
    ( LOOKAHEAD(2) t = getBLOCK_PARAMS() { params = newWikiParameters(t.image.trim()); } )?
    {
    }
    (LOOKAHEAD(2) ( t = getNL() { }) )?
    {
    }
    getVERBATIM_START()
    {
    }
	verbatimBody(false, params)
}

void verbatimBody(boolean inline, WikiParameters params):
{
    Token t = null;
    StringBuffer buf = new StringBuffer();
    // begin of the verbatim block; we need it to make trim() safly
    buf.append("{{{"); 
    String str = null;
    boolean hasVerbatimEnd = true;
    boolean eof = false;
}
{
    (LOOKAHEAD(2)
        (
              t = getINTERNAL_VERBATIM_CONTENT() {  hasVerbatimEnd = false; }
            | t = getINTERNAL_VERBATIM_END() {  hasVerbatimEnd = true; }
            | t = getINTERNAL_VERBATIM_START() {  hasVerbatimEnd = false; }
        )
        {
            str = WikiScannerUtil.unescape(t.image, '~');
            buf.append(str);        
        }
    )*
    (LOOKAHEAD(2) ( t = <EOF> { eof = true; }) )?
    {
        str = buf.toString();
        // If this block does not have a explicit end of the block then we should not trim it and remove
        // last "}}}" characters
        boolean beginParagraph = false;
        char ch = str.charAt(str.length() - 1);
        boolean endingNewLine = ch == '\r' || ch == '\n';
        if (hasVerbatimEnd) { 
            // If we did not found a new line at the end of a block then it should be an inline element
            if (inline == false) {
                beginParagraph = inline |= !endingNewLine && !eof;
            }
            str = str.trim();
            str = str.substring(0, str.length() - "}}}".length());
        }
        str = str.substring("{{{".length());
        
        if (beginParagraph) {
        	sendOnEmptyLinesEvent(false);
            fContext.beginParagraph();
            if (params.getSize() > 0) {
                fContext.onFormat(params);
            }
        } else {
        	sendOnEmptyLinesEvent(true);
        }

		fContext.onVerbatim(str, inline, params);
        if (endingNewLine && inline) {
        	fContext.onLineBreak();
        }

        if (beginParagraph) {
            lines();
        	fContext.endParagraph();
        }        	
    }
}

void macroBlock():
{
    Token t = null;
}
{
    t = getMACRO_EMPTY_BLOCK()
    {
        sendOnEmptyLinesEvent(true);
        emptyMacro(t, true);
    }
    |
    t = getMACRO_BLOCK_START()
    {
        sendOnEmptyLinesEvent(true);
        macro(t, true);
    }
}

/**
 * If shouldIncrement is true send one more empty lines. All block
 * elements other than paragraph should call shouldIncremet with
 * true since we need to emit one more new line for them (since the
 * lexer "eats" a NewLine token to recognize these block elements.
 */
void sendOnEmptyLinesEvent(boolean shouldIncrement):
{
}
{
    {
        if (emptyLinesCount > 1) {
            fContext.onEmptyLines(shouldIncrement ? emptyLinesCount : emptyLinesCount - 1);
        }
        emptyLinesCount = 0;
    }
}

void emptyMacro(Token t, boolean block):
{
}
{
    {
        String str = t.image.trim();
        str = str.substring(2, str.length() - 3);
        String paramStr = "";
        int paramStrPos = str.indexOf(" ");
        String name = "";
        if (paramStrPos > 0) {
            paramStr = str.substring(paramStrPos);
            name = str.substring(0, paramStrPos);
        } else {
            name = str;
        }
        name = name.trim();

        str = "";
        WikiParameters params = new WikiParameters(paramStr);
        if (block) {
            fContext.onMacroBlock(name, params, str);
        } else {
            fContext.onMacroInline(name, params, str);
        }        
    }
}
void macro(Token t, boolean block):
{
    StringBuffer buf = new StringBuffer();
    String name = "";
    WikiParameters params;
    String paramStr = "";
    int paramStrPos = -1;
    String str = null;
    boolean end = false;
    String prevEnd = null;
}
{
    {
        str = t.image.trim();
        str = str.substring(2, str.length() - 2);
        paramStrPos = str.indexOf(" ");
        if (paramStrPos > 0) {
            paramStr = str.substring(paramStrPos);
            name = str.substring(0, paramStrPos);
        } else {
            name = str;
        }
        name = name.trim();
    }
    (LOOKAHEAD(2)
        (
              t = getINTERNAL_MACRO_START() { end = false; }
            | t = getINTERNAL_MACRO_END() { end = true; }
            | t = getINTERNAL_MACRO_CONTENT() { end = false; }
        )
        {
            if (prevEnd != null) {
                buf.append(prevEnd);
            }
            if (end) {
                prevEnd = t.image;
            } else {
                prevEnd = null;
                buf.append(t.image);
            }
        }
    )*
    {
        str = buf.toString();
        params = new WikiParameters(paramStr);
        if (block) {
            fContext.onMacroBlock(name, params, str);
        } else {
            fContext.onMacroInline(name, params, str);
        }
    }
}

void horline():
{
    Token t = null;
    String str = "";
    WikiParameters params = WikiParameters.EMPTY;
}
{
    ( LOOKAHEAD(2) t = getBLOCK_PARAMS() { str = t.image.trim(); } )?
    {
        params = newWikiParameters(str);
    }
    t = getHORLINE()
    {
        sendOnEmptyLinesEvent(true);
        fContext.onHorizontalLine(params);
    }
}

void paragraph():
{
    Token t = null;
    String params1 = "";
    String params2 = "";
    boolean inline = true;
}
{
    (
        ( LOOKAHEAD(2)
          ( ( t = getBLOCK_PARAMS() { params1 = t.image.trim(); } )
            ( t = getBLOCK_PARAMS() { params2 = t.image.trim(); } )
          ) 
          {
              sendOnEmptyLinesEvent(false);
        	  fContext.beginParagraph(newWikiParameters(params1));
        	  fContext.onFormat(newWikiParameters(params2));
          }
          |
          ( ( t = getBLOCK_PARAMS() { params1 = t.image.trim(); } )
            ( LOOKAHEAD(2) getNL() { inline = false; } )?
       	  )
          {
              sendOnEmptyLinesEvent(false);
              if (inline) {
              	  fContext.beginParagraph();
           	      fContext.onFormat(newWikiParameters(params1));
              } else {
            	  fContext.beginParagraph(newWikiParameters(params1));
              }
          }
        )
        ( LOOKAHEAD(2) lines() )?
        {
            fContext.endParagraph();
        }
    )
    |
    (
        {
            sendOnEmptyLinesEvent(false);
            fContext.beginParagraph();
        }
        lines()
        {
            fContext.endParagraph();
        }
    )
}

void quot():
{
    Token t = null;
    String str = "";
}
{
    ( LOOKAHEAD(2) t = getBLOCK_PARAMS() { str = t.image.trim(); } )?
    {
        WikiParameters params = newWikiParameters(str);
        sendOnEmptyLinesEvent(true);
        fContext.beginQuot(params);
    }
    ( LOOKAHEAD(2) quotLine() )+
    {
        fContext.endQuot();
    }
}

void quotLine():
{
    Token t = null;
    String str = "";
}
{
    t = getQUOT_LINE()
    {
        str = t.image.trim();
        int depth = str.length();
        fContext.beginQuotLine(depth);
    }
    (LOOKAHEAD(2) line() )?
    {
        fContext.endQuotLine();
    }
}

void emptyParagraph():
{
}
{
    getNL()  (LOOKAHEAD(2) getNL() { emptyLinesCount++; } )*
    {
    }
}

void lines():
{
}
{
    line()
    ( LOOKAHEAD(2)
        newLine()
        line()
    )*
}

void newLine():
{
}
{
    getNL()
    {
       fContext.onNewLine();
    }
}

void line():
{
    Token t = null;
    String str = null;
    boolean explicitLink = false;
}
{
    ( LOOKAHEAD(2)
        (
            t = getINLINE_PARAMS()
            {
            	fContext.onFormat(newWikiParameters(t.image.trim()));
            }
            |
            t = getWORD()
            {
                fContext.onWord(t.image.replaceAll("~", ""));
            }
            |
            t = getXWIKI_SPACE()
            {
                fContext.onSpace(t.image.replaceAll("~", ""));
            }
            |
            t = getSPECIAL_SYMBOL()
            {
                if (t.image.length() == 2) {
                    // The first char is an escape symbol, only send the second one
                    fContext.onSpecialSymbol("" + t.image.charAt(1));
                } else {
                	fContext.onSpecialSymbol(t.image);
                }
            }
            |
            t = getFORMAT_SYMBOL()
            {
                str = t.image.trim();
                WikiStyle style = null;
                if ("**".equals(str)) {
                	style  = IWikiScannerContext.STRONG;
                } else if ("//".equals(str)) {
                  	style  = IWikiScannerContext.EM;
                } else if ("--".equals(str)) {
                  	style  = IWikiScannerContext.STRIKE;
                } else if ("__".equals(str)) {
                    style  = IWikiScannerContext.INS;
                } else if ("^^".equals(str)) {
                    style  = IWikiScannerContext.SUP;
                } else if (",,".equals(str)) {
                	style  = IWikiScannerContext.SUB;
              	} else if ("##".equals(str)) {
                	style  = IWikiScannerContext.MONO;
				}
                fContext.onFormat(style);
            }
            |
            (
			    t = getVERBATIM_START()
			    {
			    }
				verbatimBody(true, WikiParameters.EMPTY)
			)
            |
            t = getHEADER_END()
            {
                if (!fContext.isInHeader()) {
                	int pos = t.image.indexOf('=');
                	if (pos > 0) {
                		// Spaces are sent as a single event.
                		fContext.onSpace(t.image.substring(0, pos));
                	} 
                    for (int i = pos; i < t.image.length(); i++) {
                        // And special symbols are sent as one event per symbol.
                        fContext.onSpecialSymbol("=");
                    }
                } else {
			        fContext.endHeader();
			    }
            }
            |
            t = getBR()
            {
                fContext.onLineBreak();
            }
            |
            t = getXWIKI_URI()
            {
                fContext.onReference(t.image.trim());
            }
            |
            t = getREFERENCE() 
            {
                str = t.image.trim();
                if (str.startsWith("[[")) {
                    str = str.substring(2, str.length() - 2);
                    str = str.trim();
                }
                WikiReference ref = fReferenceParser.parse(str);
                fContext.onReference(ref);
            }
            |
            t = getTABLE_CELL() 
            {
                if (fContext.isInTable()) {
                    str = t.image.trim();
                    WikiParameters cellParams = newWikiParameters(str);
                    boolean head  = str.startsWith("|=") || str.startsWith("!=");
                    fContext.onTableCell(head, cellParams);
                } else {
                    fContext.onSpecialSymbol(t.image);
                }
            }
            |
            t = getMACRO_EMPTY_INLINE()
            {
                emptyMacro(t, false);
            }
            |
            t = getMACRO_INLINE_START() 
            {
                macro(t, false);
            }
        )
    )+
}
