/* Generated By:JavaCC: Do not edit this line. MediawikiScanner.java */
/*******************************************************************************
 * Copyright (c) 2005,2007 Cognium Systems SA and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution, and is available at
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Contributors:
 *     Cognium Systems SA - initial API and implementation
 *******************************************************************************/
package org.wikimodel.wem.mediawiki.javacc;

import org.wikimodel.wem.IWikiReferenceParser;
import org.wikimodel.wem.WikiStyle;
import org.wikimodel.wem.WikiParameters;
import org.wikimodel.wem.WikiReference;
import org.wikimodel.wem.impl.IWikiScannerContext;
import org.wikimodel.wem.mediawiki.MediaWikiReferenceParser;

/**
 * This is the internal wiki page parser generated from the grammar file.
 * 
 * @author kotelnikov
 */
public class MediawikiScanner implements MediawikiScannerConstants {

    private IWikiScannerContext fContext;

    /**
     * Count number of empty lines to send when we emit the onEmptyLines event.
     * We need to count them since the number we send depend on the next block
     * element. For all block elements other than paragraph we send one more
     * empty lines since these blocks are recognized by the lexer as NewLine
     * token followed by the token for the element and thus that "eats" one
     * NewLine which is why we need to add it again.
     */
    private int emptyLinesCount = 0;

    private IWikiReferenceParser fReferenceParser = new MediaWikiReferenceParser();

    public void parse(IWikiScannerContext context) throws ParseException {
        fContext = context;
        doParse();
    }

// <getters>
  final public Token getESCAPE() throws ParseException {
                        Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_ESCAPE:
      t = jj_consume_token(I_ESCAPE);
      break;
    case D_ESCAPE:
      t = jj_consume_token(D_ESCAPE);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getTABLE_BEGIN() throws ParseException {
                             Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_TABLE_BEGIN:
      t = jj_consume_token(I_TABLE_BEGIN);
      break;
    case D_TABLE_BEGIN:
      t = jj_consume_token(D_TABLE_BEGIN);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                   {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getTABLE_END() throws ParseException {
                           Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_TABLE_END:
      t = jj_consume_token(I_TABLE_END);
      break;
    case D_TABLE_END:
      t = jj_consume_token(D_TABLE_END);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                             {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getTABLE_CAPTION() throws ParseException {
                               Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_TABLE_CAPTION:
      t = jj_consume_token(I_TABLE_CAPTION);
      break;
    case D_TABLE_CAPTION:
      t = jj_consume_token(D_TABLE_CAPTION);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getTABLE_ROW() throws ParseException {
                           Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_TABLE_ROW:
      t = jj_consume_token(I_TABLE_ROW);
      break;
    case D_TABLE_ROW:
      t = jj_consume_token(D_TABLE_ROW);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                             {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getTABLE_CELL() throws ParseException {
                            Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_TABLE_CELL:
      t = jj_consume_token(I_TABLE_CELL);
      break;
    case D_TABLE_CELL:
      t = jj_consume_token(D_TABLE_CELL);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getTABLE_CELL_NL() throws ParseException {
                               Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_TABLE_CELL_NL:
      t = jj_consume_token(I_TABLE_CELL_NL);
      break;
    case D_TABLE_CELL_NL:
      t = jj_consume_token(D_TABLE_CELL_NL);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getLIST_ITEM() throws ParseException {
                           Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_LIST_ITEM:
      t = jj_consume_token(I_LIST_ITEM);
      break;
    case D_LIST_ITEM:
      t = jj_consume_token(D_LIST_ITEM);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                             {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getHEADER_BEGIN() throws ParseException {
                              Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_HEADER_BEGIN:
      t = jj_consume_token(I_HEADER_BEGIN);
      break;
    case D_HEADER_BEGIN:
      t = jj_consume_token(D_HEADER_BEGIN);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                      {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getHORLINE() throws ParseException {
                         Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_HORLINE:
      t = jj_consume_token(I_HORLINE);
      break;
    case D_HORLINE:
      t = jj_consume_token(D_HORLINE);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                       {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getREFERENCE() throws ParseException {
                           Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_REFERENCE:
      t = jj_consume_token(I_REFERENCE);
      break;
    case D_REFERENCE:
      t = jj_consume_token(D_REFERENCE);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                             {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getHEADER_END() throws ParseException {
                            Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_HEADER_END:
      t = jj_consume_token(I_HEADER_END);
      break;
    case D_HEADER_END:
      t = jj_consume_token(D_HEADER_END);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getDD() throws ParseException {
                    Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_DD:
      t = jj_consume_token(I_DD);
      break;
    case D_DD:
      t = jj_consume_token(D_DD);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                        {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getVERBATIM_BLOCK() throws ParseException {
                                Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_VERBATIM_BLOCK:
      t = jj_consume_token(I_VERBATIM_BLOCK);
      break;
    case D_VERBATIM_BLOCK:
      t = jj_consume_token(D_VERBATIM_BLOCK);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                            {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getVERBATIM_INLINE() throws ParseException {
                                 Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_VERBATIM_INLINE:
      t = jj_consume_token(I_VERBATIM_INLINE);
      break;
    case D_VERBATIM_INLINE:
      t = jj_consume_token(D_VERBATIM_INLINE);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                               {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getFORMAT_SYMBOL() throws ParseException {
                               Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_FORMAT_SYMBOL:
      t = jj_consume_token(I_FORMAT_SYMBOL);
      break;
    case D_FORMAT_SYMBOL:
      t = jj_consume_token(D_FORMAT_SYMBOL);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getBR() throws ParseException {
                    Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_BR:
      t = jj_consume_token(I_BR);
      break;
    case D_BR:
      t = jj_consume_token(D_BR);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                        {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getQUOT_LINE() throws ParseException {
                           Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_QUOT_LINE:
      t = jj_consume_token(I_QUOT_LINE);
      break;
    case D_QUOT_LINE:
      t = jj_consume_token(D_QUOT_LINE);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                             {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getMACRO() throws ParseException {
                       Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_MACRO:
      t = jj_consume_token(I_MACRO);
      break;
    case D_MACRO:
      t = jj_consume_token(D_MACRO);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                 {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getNO_INCLUDE() throws ParseException {
                            Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_NO_INCLUDE:
      t = jj_consume_token(I_NO_INCLUDE);
      break;
    case D_NO_INCLUDE:
      t = jj_consume_token(D_NO_INCLUDE);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

    // "Standard" tokens. They are the same for all wikis.
  final public Token getURI() throws ParseException {
                     Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_URI:
      t = jj_consume_token(I_URI);
      break;
    case D_URI:
      t = jj_consume_token(D_URI);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                           {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getNL() throws ParseException {
                    Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_NL:
      t = jj_consume_token(I_NL);
      break;
    case D_NL:
      t = jj_consume_token(D_NL);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                        {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getSPACE() throws ParseException {
                       Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_SPACE:
      t = jj_consume_token(I_SPACE);
      break;
    case D_SPACE:
      t = jj_consume_token(D_SPACE);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                 {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getWORD() throws ParseException {
                      Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_WORD:
      t = jj_consume_token(I_WORD);
      break;
    case D_WORD:
      t = jj_consume_token(D_WORD);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                              {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getSPECIAL_SYMBOL() throws ParseException {
                                Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_SPECIAL_SYMBOL:
      t = jj_consume_token(I_SPECIAL_SYMBOL);
      break;
    case D_SPECIAL_SYMBOL:
      t = jj_consume_token(D_SPECIAL_SYMBOL);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                            {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

// </getters>
  final public void doParse() throws ParseException {
    token_source.SwitchTo(token_source.INITIAL_CONTEXT);
        fContext.beginDocument();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case I_ESCAPE:
      case I_TABLE_BEGIN:
      case I_TABLE_END:
      case I_TABLE_ROW:
      case I_TABLE_CELL:
      case I_TABLE_CELL_NL:
      case I_LIST_ITEM:
      case I_HEADER_BEGIN:
      case I_HORLINE:
      case I_REFERENCE:
      case I_HEADER_END:
      case I_DD:
      case I_VERBATIM_BLOCK:
      case I_VERBATIM_INLINE:
      case I_FORMAT_SYMBOL:
      case I_BR:
      case I_QUOT_LINE:
      case I_MACRO:
      case I_NO_INCLUDE:
      case I_URI:
      case I_NL:
      case I_SPACE:
      case I_WORD:
      case I_SPECIAL_SYMBOL:
      case D_ESCAPE:
      case D_TABLE_BEGIN:
      case D_TABLE_END:
      case D_TABLE_ROW:
      case D_TABLE_CELL:
      case D_TABLE_CELL_NL:
      case D_LIST_ITEM:
      case D_HEADER_BEGIN:
      case D_HORLINE:
      case D_REFERENCE:
      case D_HEADER_END:
      case D_DD:
      case D_VERBATIM_BLOCK:
      case D_VERBATIM_INLINE:
      case D_FORMAT_SYMBOL:
      case D_BR:
      case D_QUOT_LINE:
      case D_MACRO:
      case D_NO_INCLUDE:
      case D_URI:
      case D_NL:
      case D_SPACE:
      case D_WORD:
      case D_SPECIAL_SYMBOL:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_1;
      }
      docElements();
    }
    jj_consume_token(0);
        sendOnEmptyLinesEvent(true);
        fContext.endDocument();
  }

  final public void docElements() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_MACRO:
    case D_MACRO:
      macro();
      break;
    case I_NO_INCLUDE:
    case D_NO_INCLUDE:
      noInclude();
      break;
    default:
      jj_la1[27] = jj_gen;
      if (jj_2_2(2)) {
        table();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case I_HEADER_BEGIN:
        case D_HEADER_BEGIN:
          header();
          break;
        case I_LIST_ITEM:
        case D_LIST_ITEM:
          list();
          break;
        case I_VERBATIM_BLOCK:
        case D_VERBATIM_BLOCK:
          verbatimBlock();
          break;
        case I_HORLINE:
        case D_HORLINE:
          horline();
          break;
        case I_ESCAPE:
        case I_TABLE_CELL:
        case I_TABLE_CELL_NL:
        case I_REFERENCE:
        case I_HEADER_END:
        case I_DD:
        case I_VERBATIM_INLINE:
        case I_FORMAT_SYMBOL:
        case I_BR:
        case I_QUOT_LINE:
        case I_URI:
        case I_SPACE:
        case I_WORD:
        case I_SPECIAL_SYMBOL:
        case D_ESCAPE:
        case D_TABLE_CELL:
        case D_TABLE_CELL_NL:
        case D_REFERENCE:
        case D_HEADER_END:
        case D_DD:
        case D_VERBATIM_INLINE:
        case D_FORMAT_SYMBOL:
        case D_BR:
        case D_QUOT_LINE:
        case D_URI:
        case D_SPACE:
        case D_WORD:
        case D_SPECIAL_SYMBOL:
          if (jj_2_1(2)) {
            quot();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case I_ESCAPE:
            case I_TABLE_CELL:
            case I_TABLE_CELL_NL:
            case I_REFERENCE:
            case I_HEADER_END:
            case I_DD:
            case I_VERBATIM_INLINE:
            case I_FORMAT_SYMBOL:
            case I_BR:
            case I_URI:
            case I_SPACE:
            case I_WORD:
            case I_SPECIAL_SYMBOL:
            case D_ESCAPE:
            case D_TABLE_CELL:
            case D_TABLE_CELL_NL:
            case D_REFERENCE:
            case D_HEADER_END:
            case D_DD:
            case D_VERBATIM_INLINE:
            case D_FORMAT_SYMBOL:
            case D_BR:
            case D_URI:
            case D_SPACE:
            case D_WORD:
            case D_SPECIAL_SYMBOL:
              paragraph();
              break;
            default:
              jj_la1[26] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        case I_NL:
        case D_NL:
          emptyParagraph();
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void macro() throws ParseException {
   Token t = null;
    t = getMACRO();
        sendOnEmptyLinesEvent(false);
        String str=t.image.trim();
        if(str.equals("__TOC__"))
        {
          fContext.onMacro("toc", WikiParameters.newWikiParameters("numbered=true"), null);
        }else if(str.equals("__NOTOC__"))
        {
          fContext.onMacro("notoc", WikiParameters.EMPTY, null);
        }else if(str.equals("__FORCETOC__"))
        {
          fContext.onMacro("forcetoc",WikiParameters.EMPTY, null);
        }else if(str.contains("references"))
        {
          fContext.onMacro("footnotes",WikiParameters.EMPTY,null);
        }else
        {
          fContext.onMacro("unhandled",WikiParameters.newWikiParameters(""),str);
        }
  }

  final public void noInclude() throws ParseException {
   Token t = null;
    t = getNO_INCLUDE();
        sendOnEmptyLinesEvent(true);
  }

  final public void header() throws ParseException {
   Token t = null;
    t = getHEADER_BEGIN();
        sendOnEmptyLinesEvent(true);
        int level = t.image.trim().length();
        fContext.beginHeader(level);
    if (jj_2_3(2)) {
      line();
    } else {
      ;
    }
        fContext.endHeader();
  }

  final public void table() throws ParseException {
   Token t = null;
   String str = "";
   WikiParameters params = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_TABLE_BEGIN:
    case D_TABLE_BEGIN:
      t = getTABLE_BEGIN();
      sendOnEmptyLinesEvent(true);
      str=t.image.trim();
      str=str.substring("{|".length()).trim();
      params = new WikiParameters(str);
      fContext.beginTable(params);
      break;
    case I_TABLE_END:
    case D_TABLE_END:
      t = getTABLE_END();
      fContext.endTable();
      break;
    case I_TABLE_ROW:
    case D_TABLE_ROW:
      t = getTABLE_ROW();
        if  (fContext.isInTable())  {
            str = t.image.trim();
            str = str.substring("|-".length()).trim();
            params = new WikiParameters(str);
            fContext.onTableRow(params);
        }
      break;
    case I_TABLE_CELL_NL:
    case D_TABLE_CELL_NL:

      label_2:
      while (true) {
        tableRow();
        if (jj_2_4(2)) {
          ;
        } else {
          break label_2;
        }
      }

      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void tableRow() throws ParseException {
    Token t = null;
    t = getTABLE_CELL_NL();
        sendOnEmptyLinesEvent(true);
        String str = t.image.trim();
        boolean head  = str.startsWith("!");
        fContext.beginTableCell(head);
    label_3:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_3;
      }
      block();
    }

  }

  final public void list() throws ParseException {
        sendOnEmptyLinesEvent(true);
        fContext.beginList();
    label_4:
    while (true) {
      listItem();
      if (jj_2_6(2)) {
        ;
      } else {
        break label_4;
      }
    }
        fContext.endList();
  }

  final public void listItem() throws ParseException {
    Token t = null;
    t = getLIST_ITEM();
        sendOnEmptyLinesEvent(true);
        fContext.beginListItem(t.image);
    label_5:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_5;
      }
      block();
    }
        fContext.endListItem();
  }

  final public void block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_ESCAPE:
    case I_TABLE_CELL:
    case I_TABLE_CELL_NL:
    case I_REFERENCE:
    case I_HEADER_END:
    case I_DD:
    case I_VERBATIM_INLINE:
    case I_FORMAT_SYMBOL:
    case I_BR:
    case I_URI:
    case I_SPACE:
    case I_WORD:
    case I_SPECIAL_SYMBOL:
    case D_ESCAPE:
    case D_TABLE_CELL:
    case D_TABLE_CELL_NL:
    case D_REFERENCE:
    case D_HEADER_END:
    case D_DD:
    case D_VERBATIM_INLINE:
    case D_FORMAT_SYMBOL:
    case D_BR:
    case D_URI:
    case D_SPACE:
    case D_WORD:
    case D_SPECIAL_SYMBOL:
      lines();
      break;
    case I_VERBATIM_BLOCK:
    case D_VERBATIM_BLOCK:
      verbatimBlock();
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void verbatimBlock() throws ParseException {
    Token t = null;
    t = getVERBATIM_BLOCK();
        sendOnEmptyLinesEvent(true);
        String str = t.image.trim();
        String tag=str.substring(1,str.indexOf('>'));
        int len = 0;
        int end = 0;
        WikiParameters params = null;
        if ("nowiki".equalsIgnoreCase(tag)|| "pre".equalsIgnoreCase(tag)) {
          len = tag.length()+2;
          end = len;
          str = str.substring(len, str.length() - end - 1);
          fContext.onVerbatim(str, false);
        }else if (str.startsWith("<pre")) {
          len = str.indexOf('>')+1;
          end = "<pre>".length();
          params=new WikiParameters(str.substring("<pre".length(),len-1));
          str = str.substring(len, str.length() - end - 1);
          fContext.onVerbatim(str, false,params);
        }
  }

  final public void horline() throws ParseException {
    Token t = null;
    t = getHORLINE();
        fContext.onHorizontalLine();
  }

  final public void paragraph() throws ParseException {
    Token t = null;
    String str = "";
        sendOnEmptyLinesEvent(true);
        fContext.beginParagraph();
    lines();
        fContext.endParagraph();
  }

  final public void quot() throws ParseException {
    Token t = null;
    int depthCounter = 0;
        fContext.beginQuot();
    quotLine();
    label_6:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_6;
      }
      getNL();
      quotLine();
    }
        fContext.endQuot();
  }

  final public void quotLine() throws ParseException {
    Token t = null;
    String str = "";
    t = getQUOT_LINE();
        str = t.image.trim();
        int depth = str.length();
        fContext.beginQuotLine(depth);
    if (jj_2_9(2)) {
      line();
    } else {
      ;
    }
        fContext.endQuotLine();
  }

  final public void emptyParagraph() throws ParseException {
    getNL();
    label_7:
    while (true) {
      if (jj_2_10(2)) {
        ;
      } else {
        break label_7;
      }
      getNL();
                                    emptyLinesCount++;
    }
  }

  final public void lines() throws ParseException {
    line();
    label_8:
    while (true) {
      if (jj_2_11(2)) {
        ;
      } else {
        break label_8;
      }
      newLine();
      line();
    }
  }

  final public void newLine() throws ParseException {
    getNL();
        sendOnEmptyLinesEvent(true);
        fContext.onNewLine();
  }

  final public void line() throws ParseException {
    Token t = null;
    String str = null;
    boolean explicitLink = false;
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case I_ESCAPE:
      case D_ESCAPE:
        t = getESCAPE();
                sendOnEmptyLinesEvent(true);
                fContext.onEscape("" + t.image.charAt(1));
        break;
      case I_WORD:
      case D_WORD:
        t = getWORD();
                sendOnEmptyLinesEvent(true);
                fContext.onWord(t.image);
        break;
      case I_SPACE:
      case D_SPACE:
        t = getSPACE();
                sendOnEmptyLinesEvent(true);
                fContext.onSpace(t.image);
        break;
      case I_SPECIAL_SYMBOL:
      case D_SPECIAL_SYMBOL:
        t = getSPECIAL_SYMBOL();
                sendOnEmptyLinesEvent(true);
                fContext.onSpecialSymbol(t.image);
        break;
      case I_FORMAT_SYMBOL:
      case D_FORMAT_SYMBOL:
        t = getFORMAT_SYMBOL();
               sendOnEmptyLinesEvent(true);
                str = t.image.trim();
                if (str.startsWith("<")) {
                    str = str.substring(1, str.length() - 1);
                        boolean close = str.startsWith("/");
                        if (close)
                           str = str.substring(1);
                        if ("sub".equals(str)) {
                                fContext.onFormat(IWikiScannerContext.SUB, close);
                        } else if ("sup".equals(str)) {
                                fContext.onFormat(IWikiScannerContext.SUP, close);
                        } else if ("code".equals(str)) {
                                fContext.onFormat(IWikiScannerContext.CODE, close);
                        } else if ("tt".equals(str)) {
                                fContext.onFormat(IWikiScannerContext.TT, close);
                        } else if ("ref".equals(str)) {
                                fContext.onFormat(IWikiScannerContext.REF, close);
                        } else if ("del".equals(str)) {
                                fContext.onFormat(IWikiScannerContext.DEL, close);
                        }else if ("s".equals(str)) {
                                fContext.onFormat(IWikiScannerContext.STRIKE, close);
                        }else if(str.startsWith("ref"))
                        {
                          WikiParameters params=new WikiParameters(str.substring("ref".length()+1).trim());
                          fContext.onFormat(IWikiScannerContext.REF, close);
                        }
                } else {
                        if ("'''''".equals(str)) {
                                fContext.onFormat(IWikiScannerContext.STRONG);
                                fContext.onFormat(IWikiScannerContext.EM);
                        } else if ("'''".equals(str)) {
                                fContext.onFormat(IWikiScannerContext.STRONG);
                        } else if ("''".equals(str)) {
                                fContext.onFormat(IWikiScannerContext.EM);
                        }
                }
        break;
      case I_VERBATIM_INLINE:
      case D_VERBATIM_INLINE:
        t = getVERBATIM_INLINE();
                sendOnEmptyLinesEvent(true);
                str = t.image.trim();
                int len = "<math>".length();
                str = str.substring(len, str.length() - len - 1);
                fContext.onVerbatim(str, true);
        break;
      case I_HEADER_END:
      case D_HEADER_END:
        t = getHEADER_END();
                sendOnEmptyLinesEvent(true);
                if (!fContext.isInHeader()) {
                    fContext.onSpecialSymbol(t.image);
                }
        break;
      case I_BR:
      case D_BR:
        t = getBR();
                sendOnEmptyLinesEvent(true);
                fContext.onLineBreak();
        break;
      case I_URI:
      case D_URI:
        t = getURI();
                sendOnEmptyLinesEvent(true);
                fContext.onReference(t.image.trim());
        break;
      case I_REFERENCE:
      case D_REFERENCE:
        t = getREFERENCE();
                sendOnEmptyLinesEvent(true);
                str = t.image.trim();
                if (str.startsWith("[[") && str.endsWith("]]")) {
                    str = str.substring(2, str.length() - 2);
                } else  if (str.startsWith("[")) {
                    str = str.substring(1, str.length() - 1);
                }
                str = str.trim();
                WikiReference ref = fReferenceParser.parse(str);
                int pipeCount = str.replaceAll("[^|]", "").length();
                if(str.toLowerCase().startsWith("image:")|| (str.toLowerCase().startsWith("file:") && pipeCount >1))
                {
                  fContext.onImage(ref);
                }else
                {
                  fContext.onReference(ref);
                }
        break;
      case I_TABLE_CELL_NL:
      case D_TABLE_CELL_NL:
        t = getTABLE_CELL_NL();
                sendOnEmptyLinesEvent(true);
                if (fContext.isInTable()) {
                    str = t.image.trim();
                    boolean headnl  = str.startsWith("!");
                    fContext.onTableCell(headnl);
                }else {
                    fContext.onSpecialSymbol(t.image);
                }
        break;
      case I_TABLE_CELL:
      case D_TABLE_CELL:
        t = getTABLE_CELL();
                sendOnEmptyLinesEvent(true);
                if (fContext.isInTable()) {
                    str = t.image.trim();
                    boolean head  = str.startsWith("!");
                    fContext.onTableCell(head);
                } else {
                    fContext.onSpecialSymbol(t.image);
                }
        break;
      case I_DD:
      case D_DD:
        t = getDD();
                sendOnEmptyLinesEvent(true);
                if (fContext.canApplyDefintionSplitter()) {
                    fContext.onDefinitionListItemSplit();
                } else {
                    fContext.onSpecialSymbol(t.image);
                }
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_12(2)) {
        ;
      } else {
        break label_9;
      }
    }
  }

/**
 * If shouldIncrement is true send one more empty lines. All block
 * elements other than paragraph should call shouldIncremet with
 * true since we need to emit one more new line for them (since the
 * lexer "eats" a NewLine token to recognize these block elements.
 */
  final public void sendOnEmptyLinesEvent(boolean shouldIncrement) throws ParseException {
        if (emptyLinesCount > 1) {
            fContext.onEmptyLines(shouldIncrement ? emptyLinesCount : emptyLinesCount - 1);
        }
        emptyLinesCount = 0;
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_3R_17() {
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_16()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    return false;
  }

  private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    if (jj_3_12()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    if (jj_3_4()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) return true;
    }
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    }
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) return true;
    }
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    }
    return false;
  }

  private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    }
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) return true;
    }
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) return true;
    }
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) return true;
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) return true;
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_18()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) return true;
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_12()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) return true;
    }
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_14()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MediawikiScannerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x200000,0x400000,0x800000,0x1000000,0x2000000,0x4000000,0x8000000,0x10000000,0x20000000,0x40000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfee00000,0x8c200000,0x0,0xfc200000,0xac00000,0x8c200000,0x8c200000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x4000,0x8000,0x10000,0x20000,0x40000,0x80000,0x100000,0x200000,0x400000,0x800000,0x1000000,0x2000001,0x4000002,0x8000004,0x10000008,0x20000010,0x40000020,0x80000040,0x80,0x100,0x200,0x400,0x800,0x1000,0x2000,0xfffdffff,0x77187a3b,0x180,0xfff87e7f,0x158000,0x7f187a3f,0x77187a3b,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x2,0x4,0x8,0x10,0x20,0x40,0x7f,0x74,0x3,0x7c,0x0,0x74,0x74,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MediawikiScanner(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MediawikiScanner(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MediawikiScannerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MediawikiScanner(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MediawikiScannerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MediawikiScanner(MediawikiScannerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MediawikiScannerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[103];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 103; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
