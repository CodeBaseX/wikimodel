options
{
    STATIC = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(ConfluenceWikiScanner)
/*******************************************************************************
 * Copyright (c) 2005,2007 Cognium Systems SA and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Apache License, Version 2.0
 * which accompanies this distribution, and is available at
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Contributors:
 *     Cognium Systems SA - initial API and implementation
 *******************************************************************************/
package org.wikimodel.wem.confluence.javacc;

import org.wikimodel.wem.IWikiReferenceParser;
import org.wikimodel.wem.WikiParameters;
import org.wikimodel.wem.WikiReference;
import org.wikimodel.wem.WikiStyle;
import org.wikimodel.wem.confluence.ConfluenceWikiReferenceParser;
import org.wikimodel.wem.impl.IWikiScannerContext;
import org.wikimodel.wem.impl.InlineState;
import org.wikimodel.wem.impl.WikiScannerUtil;

/**
 * This is the internal wiki page parser generated from the grammar file.
 * 
 * @author kotelnikov
 */
public class ConfluenceWikiScanner {

    private IWikiScannerContext fContext;

    private IWikiReferenceParser fReferenceParser = new ConfluenceWikiReferenceParser();

    public void parse(IWikiScannerContext context) throws ParseException {
        fContext = context;
        doParse();
    }
    
    private WikiParameters newMacroParameters(String paramStr) {
        return new WikiParameters(paramStr, "|");
    }

    private String[] splitMacroParams(String str) {
        str = str.trim();
        str = str.substring(1, str.length() - 1);
        String paramStr = "";
        int paramStrPos = str.indexOf(":");
        String name = "";
        if (paramStrPos > 0) {
            paramStr = str.substring(paramStrPos + 1);
            name = str.substring(0, paramStrPos);
        } else {
            name = str;
        }
        name = name.trim();
        return new String[] { name, paramStr };
    }
    
}

PARSER_END(ConfluenceWikiScanner)

TOKEN_MGR_DECLS: {
    String macroName = "";
    void initMacro(StringBuffer buf) {
        macroName = getMacroName(buf);
    }
    String getMacroName(StringBuffer buf) {
        String str = buf.toString();
        str = str.trim();
        str = str.substring(1, str.length() - 1);
        int idx = str.indexOf(":");
        if (idx > 0) {
            str = str.substring(0, idx);
        }
        return str;
    }
}

<MACRO_CONTEXT> TOKEN:
{
    <INTERNAL_MACRO: <MACRO> > {
        {
            String name = getMacroName(image); 
            int context = MACRO_CONTEXT;
            if (name.equals(macroName)) {
                context = DEFAULT;
            }
            SwitchTo(context);
        }
    }
    | <INTERNAL_MACRO_CONTENT: <MACRO_CONTENT> > : MACRO_CONTEXT
}

<DEFAULT, INITIAL_CONTEXT> TOKEN:
{
      <#LI: [ "#", "*", "-" ]>
    | <#LIST_ITEM: (<LI>)+ (<SPACE>)+ >
    | <#HEADER:  ("h1." | "h2." | "h3." | "h4." | "h5." | "h6.") (<SPACE>)* >
    | <#VERBATIM: "{{{" ( "\\" ~[] | <NEW_LINE> " }}}" | ~["}"] | "}" ~["}"] | "}}" ~["}"] )* "}}}" >
    | <#REFERENCE: 
        (
              "[" (  ~["]"] | "\\" ~[] )* "]"
            | "!" ( "\\" ~["\n", "\r"] | ~["!", "\n", "\r", " ", "\t"])+ "!" 
        ) 
      >
    | <#HORLINE: "---" ("-")+ >
    | <#ESCAPED: ( "\\" ~["\t", "\n", "\r"]) >
    | <#BR: "\\\\" >
    | <#CELL: "|" ("|") ? >
    | <#QUOT_BLOCK: ("bq." | "BQ.") >
    | <#QUOT_BLOCK_MACRO: "{quote}" >

    | <#MACRO: "{" <CHAR> ( <ESCAPED> | ~["}"]  )* "}" >
    | <#MACRO_CONTENT: ( <ESCAPED> | <CHAR> | <SPACE> |<NEW_LINE> | <SPECIAL_SYMBOL> ) >

    // EmptyMacro: anchor
    // EmptyMacro: dynamictasklist
    // EmptyMacro: gliffy
    // EmptyMacro: gallery
    // EmptyMacro: calendar
    // EmptyMacro: toggle-cloak TODO: transform to "h1. {toggle-cloak:id=Cloaked Content} Cloaked Content" 
    // EmptyMacro: rsvp
    // EmptyMacro: widget
    // EmptyMacro: content-by-user
    // EmptyMacro: index
    // EmptyMacro: include 
    // EmptyMacro: privacy-mark
    // EmptyMacro: img
    // EmptyMacro: bookmarks
    // EmptyMacro: pagetree
    // EmptyMacro: pagetreesearch
    // EmptyMacro: toc
    // EmptyMacro: livesearch
    // EmptyMacro: viewfile
    // EmptyMacro: children
    // EmptyMacro: search
    // EmptyMacro: blog-posts
    // EmptyMacro: excerpt-include
    // EmptyMacro: popular-labels
    // EmptyMacro: contentbylabel
    // EmptyMacro: related-labels
    // EmptyMacro: recently-updated
    // EmptyMacro: recently-used-labels
    // EmptyMacro: navmap
    // EmptyMacro: listlabels
    // EmptyMacro: spaces
    // EmptyMacro: recently-updated-dashboard
    // EmptyMacro: global-reports
    // EmptyMacro: welcome-message
    // EmptyMacro: create-space-button
    // EmptyMacro: jiraissue
    // EmptyMacro: jiraportlet
    // EmptyMacro: plugins-supported
    // EmptyMacro: plugin-compatibility-matrix
    // EmptyMacro: im
    // EmptyMacro: collapsablerss
    // EmptyMacro: rss
     
    // TODO: !http://www.host.com/image.gif! (see Images) 
    // TODO: !quicktime.mov! (see Confluence Content)
    
//    | <#MACRO_BLOCK: <MACRO> >
    | <#MACRO_BLOCK: "{" 
        ( 
            //"quote"               // DONE - {quote} quoted block {quote}
              "color"               // TODO: {color:xx} paragraph {color}
            | "section" 
            | "column"
            | "csv"
            | "table-plus"          // TODO: {table-plus:width=100..} table {table-plus}
            | "code"                // TODO: should be transformed in a verbatim block
            | "composition-setup"
            | "float"               // TODO: {float:xx} paragraph {float}
            | "cloak" 
            | "deck"
            | "card"
            | "show-card"
            | "chart"               // TODO: {chart: params} table {charÅ§}
            | "slideshow"
            | "slide"
            | "note"                // TODO: {note} paragraph {note}
            | "warning"             // TODO: {warning} paragraph {warning}
            | "info"                // TODO: {info} paragraph {info}
            | "tip"                 // TODO: {tip} paragraph {tip}
            | "cache"
            | "sql"
            | "noformat"            // TODO: noformat - report as a verbatim block
            | "panel"
            | "sub-section" 
            | "clickable"
            
            | "tm"                  // TODO: {tm} inline text {tm}
            | "sm"                  // TODO: {sm} inline text {sm}
            | "reg-tm"              // TODO: {reg-tm} inline text {reg-tm}
            | "copyright"           // TODO: {copyright} inline text {copyright}
            | "span"                // TODO: {span} inline text {span}

            | "lozenge" 
            | "style"
            | "div"
            | "bgcolor"
            | "center"
            | "strike"
            | "privacy-policy"
            | "roundrect"
            | "align"
            | "iframe"
            
            | "table"
            | "table-row"
            | "table-cell"
            | "th"
            | "tbody" 
            | "thead"
            
            | "ul"
            | "li"
            
            | "rollover"
            | "fancy-bullets"
            | "contentformattingtest"
            | "toc-zone"
            | "excerpt"
         )
        ( <ESCAPED> | ~["}"]  )* 
        "}"
      >
    
    | <#FORMAT_SYMBOL : ( 
          "*"   // strong
        | "_"   // em
        | "??"  // citation
        | "^"   // superscript
        | "~"   // subscript
        | "-"   // strikethrough
        | "+"   // underlined
        | "{{"  // code
        | "}}"  // code
        ) >
    | <#SPECIAL_SYMBOLS: (
          " - "
        | " -- "
        | ( " --- " | "---" )

        | " * "
        | " _ "
        | " - "
        | " + "
        | " ^ "
        | " ~ "

        | ":)"
        | ":("
        | ":P"
        | ":D"
        | ";)"
        | "(y)"
        | "(n)"
        | "(i)"
        | "(/)"
        | "(x)"
        | "(!)"
        | "(+)"
        | "(-)"
        | "(?)"
        | "(on)"
        | "(off)"
        | "(*)"
        | "(*r)"
        | "(*g)"
        | "(*b)"
        | "(*y)"

        | "..."  
        | "(" (<CHAR>|<SPECIAL_SYMBOL>) ")" 
        | "(tm)" 
        | "(TM)" 
        | "&" (<CHAR>)+ ";" 

        | "+/-"
        | "!="
        | ("-")* "->"
        | "<-" ("-")*
        | "<-" ("-")* ">"
        | ("=")* "=>"
        | "<=" ("=")* ">"
        | "<=" ("=")*
        | ">="
        | "!="
        | "~="        
        )>

// <common-tokens>
    // =========================================================================
    // New lines, spaces, special symbols and character definitions
    // =========================================================================
    | <#NEW_LINE : "\r\n" | "\r" | "\n" >
    | <#SPACE : [" ", "\t"] >
      // All special symbols from the range 0-127
    | <#SPECIAL_SYMBOL : [
        "!",     "\"",     "#",     "$",     "%",     "&",     "'",     "(",  
        ")",     "*",      "+",     ",",     "-",     ".",     "/",     ":",  
        ";",     "<",      "=",     ">",     "?",     "@",     "[",     "\\", 
        "]",     "^",      "_",     "`",     "{",     "|",     "}",     "~" 
     ] >
      // Characters are defined as all possible symbols excluding special 
      // symbols, spaces and new lines
    | <#CHAR : ~[
        "\t",    "\n",     "\r",    " ",
        "!",     "\"",     "#",     "$",     "%",     "&",     "'",     "(",  
        ")",     "*",      "+",     ",",     "-",     ".",     "/",     ":",  
        ";",     "<",      "=",     ">",     "?",     "@",     "[",     "\\", 
        "]",     "^",      "_",     "`",     "{",     "|",     "}",     "~" 
    ] >
    // =========================================================================
    // URI syntax recognition.
    // =========================================================================
    // This grammar recognize the full URI syntax with following exceptions:
    //  * It has a simplified hier-part definition: it does not contain an empty 
    //    path (so the sequences like "here: " are not recognized as URIs).
    //  * It has a simplified version of the host definition: it does not contain
    //    explicit IP definitions. 
    //  * It parses "extended" URI syntax where "opaque" URIs are treated as 
    //    having multiple schema parts
    //    Example: in an opaque URI like "download:http://www.foo.com/bar.zip"
    //    the part "download:http" is treated as a "composite" scheme part.
    //
    // See also:
    //  * http://tools.ietf.org/html/rfc3986#page-49 - the official URI grammar
    //  * http://en.wikipedia.org/wiki/Uniform_Resource_Identifier
    //  * http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax
    //  * http://www.iana.org/assignments/uri-schemes.html
    // =========================================================================
    | <#URI: <URI_SCHEME_COMPOSITE> ":" <URI_HIER_PART> ("?" <URI_QUERY>)? ("#" <URI_FRAGMENT>)? >

    | <#ALPHA: ( ["A"-"Z", "a"-"z"] )>
    | <#DIGIT: ["0"-"9"]>
    | <#HEXDIG: ( <DIGIT> | ["A"-"F"] | ["a"-"f"] ) >
    | <#URI_GEN_DELIMS: [ ":", "/", "?", "#", "[", "]", "@" ]>

    // Some default can not be accepted in the text - like "," symbols 
    //<#URI_SUB_DELIMS: [ "!", "$", "&", "'", "(", ")", "*", "+", ",", ";", "=" ]>
    | <#URI_SUB_DELIMS: [ "!", "$", "&", "'", "(", ")", "*", "+", /*",",*/ ";", "=" ]>
    | <#URI_UNRESERVED: ( <ALPHA> | <DIGIT> | "-" | "." | "_" | "~" )>
    | <#URI_RESERVED: ( <URI_GEN_DELIMS> | <URI_SUB_DELIMS> ) >
    | <#URI_SCHEME: <ALPHA> ( <ALPHA> | <DIGIT> | "+" | "-" | "." )* >
    | <#URI_SCHEME_COMPOSITE: <URI_SCHEME> ( ":" <URI_SCHEME> )* >
    | <#URI_PCT_ENCODED: "%" <HEXDIG> <HEXDIG> >
    | <#URI_PCHAR_FIRST:  ( <URI_UNRESERVED> | <URI_PCT_ENCODED> | <URI_SUB_DELIMS> ) >
    | <#URI_PCHAR:  ( <URI_PCHAR_FIRST> | ":" | "@" ) >
    | <#URI_QUERY:    ( <URI_PCHAR> | "/" | "?" )* >
    | <#URI_FRAGMENT: ( <URI_PCHAR> | "/" | "?" )* >
      // A simplified hier-part definition: it does not contain an empty path.
    | <#URI_HIER_PART: ( "//" <URI_AUTHORITY> <URI_PATH_ABEMPTY> | <URI_PATH_ABSOLUTE> | <URI_PATH_ROOTLESS> )>
    | <#URI_AUTHORITY: ( <URI_USERINFO> "@" )? <URI_HOST> ( ":" <URI_PORT> )? >
    | <#URI_USERINFO: ( <URI_UNRESERVED> | <URI_PCT_ENCODED> | <URI_SUB_DELIMS> | ":" )* >
    | <#URI_PATH_ABEMPTY: ( "/" <URI_SEGMENT> )* >
    | <#URI_PATH_ABSOLUTE: "/" ( <URI_SEGMENT_NZ> ( "/" <URI_SEGMENT> )* )? >
    | <#URI_PATH_ROOTLESS: <URI_PCHAR_FIRST> <URI_SEGMENT_NZ_NC> ( "/" <URI_SEGMENT> )* >
    | <#URI_SEGMENT: (<URI_PCHAR>)* >
    | <#URI_SEGMENT_NZ: (<URI_PCHAR>)+ >
    | <#URI_SEGMENT_NZ_NC: (<URI_UNRESERVED> | <URI_PCT_ENCODED> | <URI_SUB_DELIMS> | "@")+ >
    | <#URI_PORT: (<DIGIT>)+ >
      // A simplified version of the host: it does not contain explicit IP definitions
    | <#URI_HOST: ( <URI_REG_NAME> ) >
    | <#URI_REG_NAME: ( <URI_UNRESERVED> | <URI_PCT_ENCODED> | <URI_SUB_DELIMS> )* >
    // =========================================================================
// </common-tokens>

}

<INITIAL_CONTEXT> TOKEN:
{
// <initial-context>
      <I_LIST_ITEM: (<NEW_LINE>)? <LIST_ITEM> > : DEFAULT
    | <I_TABLE_ROW: (<NEW_LINE>)? <CELL> > : DEFAULT
    | <I_HEADER: (<NEW_LINE>)? <HEADER> (<SPACE>)* > : DEFAULT
    | <I_VERBATIM_BLOCK: (<NEW_LINE>)? <VERBATIM> > : DEFAULT
    | <I_HORLINE: (<NEW_LINE>)? <HORLINE> > : DEFAULT
    | <I_VERBATIM_INLINE: <VERBATIM> > : DEFAULT
    | <I_REFERENCE : <REFERENCE> > : DEFAULT
    | <I_TABLE_CELL : <CELL> > : DEFAULT 
    | <I_QUOT_BLOCK: (<NEW_LINE>)? <QUOT_BLOCK> > : DEFAULT
    | <I_QUOT_BLOCK_MACRO: (<NEW_LINE>)? <QUOT_BLOCK_MACRO> > : DEFAULT
    | <I_BR : <BR> > : DEFAULT

    | <I_MACRO_BLOCK_START: (<NEW_LINE>)? <MACRO_BLOCK> > { initMacro(image); } : MACRO_CONTEXT
    | <I_MACRO_EMPTY_BLOCK: (<NEW_LINE>)? <MACRO> > : DEFAULT
    | <I_MACRO_INLINE_START: <MACRO> > { initMacro(image); } : MACRO_CONTEXT
    | <I_MACRO_EMPTY_INLINE: <MACRO> > : DEFAULT
    
    | <I_ESCAPED: <ESCAPED> > : DEFAULT
    | <I_FORMAT_SYMBOL : <FORMAT_SYMBOL> > : DEFAULT
    | <I_SPECIAL_SYMBOLS: <SPECIAL_SYMBOLS> >: DEFAULT

    // "Standard" tokens. They are the same for all wikis.
    | <I_URI : <URI> > : DEFAULT
    | <I_NL: (<NEW_LINE>)? > : DEFAULT
    | <I_SPACE : ( <SPACE> )+ > : DEFAULT
    | <I_WORD : ( <CHAR> )+ > : DEFAULT
    | <I_SPECIAL_SYMBOL : <SPECIAL_SYMBOL> > : DEFAULT
// </initial-context>    
}

<DEFAULT> TOKEN:
{
// <default-context>
      <D_LIST_ITEM: <NEW_LINE> <LIST_ITEM> > : DEFAULT
    | <D_TABLE_ROW: <NEW_LINE> <CELL> > : DEFAULT
    | <D_HEADER: <NEW_LINE> <HEADER> (<SPACE>)* > : DEFAULT
    | <D_VERBATIM_BLOCK: <NEW_LINE> <VERBATIM> > : DEFAULT
    | <D_HORLINE: <NEW_LINE> <HORLINE> > : DEFAULT
    | <D_VERBATIM_INLINE: <VERBATIM> > : DEFAULT
    | <D_REFERENCE : <REFERENCE> > : DEFAULT
    | <D_TABLE_CELL : <CELL> > : DEFAULT 
    | <D_QUOT_BLOCK: <NEW_LINE> <QUOT_BLOCK> > : DEFAULT
    | <D_QUOT_BLOCK_MACRO: <NEW_LINE> <QUOT_BLOCK_MACRO> > : DEFAULT
    | <D_BR : <BR> > : DEFAULT

    | <D_MACRO_BLOCK_START: <NEW_LINE> <MACRO_BLOCK> > { initMacro(image); } : MACRO_CONTEXT
    | <D_MACRO_EMPTY_BLOCK: <NEW_LINE> <MACRO> > : DEFAULT
    | <D_MACRO_INLINE_START: <MACRO> > { initMacro(image); } : MACRO_CONTEXT
    | <D_MACRO_EMPTY_INLINE: <MACRO> > : DEFAULT
    
    | <D_ESCAPED: <ESCAPED> > : DEFAULT
    | <D_FORMAT_SYMBOL : <FORMAT_SYMBOL> > : DEFAULT
    | <D_SPECIAL_SYMBOLS: <SPECIAL_SYMBOLS> >: DEFAULT

    // "Standard" tokens. They are the same for all wikis.
    | <D_URI : <URI> > : DEFAULT
    | <D_NL: <NEW_LINE> > : DEFAULT
    | <D_SPACE : ( <SPACE> )+ > : DEFAULT
    | <D_WORD : ( <CHAR> )+ > : DEFAULT
    | <D_SPECIAL_SYMBOL : <SPECIAL_SYMBOL> > : DEFAULT
// </default-context>
}

    Token getINTERNAL_MACRO(): {Token t=null;} {(t=<INTERNAL_MACRO>){return t;}}
    Token getINTERNAL_MACRO_CONTENT(): {Token t=null;} {(t=<INTERNAL_MACRO_CONTENT>){return t;}}
// <getters>
    Token getLIST_ITEM(): {Token t=null;} {(t=<I_LIST_ITEM>|t=<D_LIST_ITEM>){return t;}}
    Token getTABLE_ROW(): {Token t=null;} {(t=<I_TABLE_ROW>|t=<D_TABLE_ROW>){return t;}}
    Token getHEADER(): {Token t=null;} {(t=<I_HEADER>|t=<D_HEADER>){return t;}}
    Token getVERBATIM_BLOCK(): {Token t=null;} {(t=<I_VERBATIM_BLOCK>|t=<D_VERBATIM_BLOCK>){return t;}}
    Token getHORLINE(): {Token t=null;} {(t=<I_HORLINE>|t=<D_HORLINE>){return t;}}
    Token getVERBATIM_INLINE(): {Token t=null;} {(t=<I_VERBATIM_INLINE>|t=<D_VERBATIM_INLINE>){return t;}}
    Token getREFERENCE(): {Token t=null;} {(t=<I_REFERENCE>|t=<D_REFERENCE>){return t;}}
    Token getTABLE_CELL(): {Token t=null;} {(t=<I_TABLE_CELL>|t=<D_TABLE_CELL>){return t;}}
    Token getQUOT_BLOCK(): {Token t=null;} {(t=<I_QUOT_BLOCK>|t=<D_QUOT_BLOCK>){return t;}}
    Token getQUOT_BLOCK_MACRO(): {Token t=null;} {(t=<I_QUOT_BLOCK_MACRO>|t=<D_QUOT_BLOCK_MACRO>){return t;}}
    Token getBR(): {Token t=null;} {(t=<I_BR>|t=<D_BR>){return t;}}

    Token getMACRO_BLOCK_START(): {Token t=null;} {(t=<I_MACRO_BLOCK_START>|t=<D_MACRO_BLOCK_START>){return t;}}
    Token getMACRO_EMPTY_BLOCK(): {Token t=null;} {(t=<I_MACRO_EMPTY_BLOCK>|t=<D_MACRO_EMPTY_BLOCK>){return t;}}
    Token getMACRO_INLINE_START(): {Token t=null;} {(t=<I_MACRO_INLINE_START>|t=<D_MACRO_INLINE_START>){return t;}}
    Token getMACRO_EMPTY_INLINE(): {Token t=null;} {(t=<I_MACRO_EMPTY_INLINE>|t=<D_MACRO_EMPTY_INLINE>){return t;}}
    
    Token getESCAPED(): {Token t=null;} {(t=<I_ESCAPED>|t=<D_ESCAPED>){return t;}}
    Token getFORMAT_SYMBOL(): {Token t=null;} {(t=<I_FORMAT_SYMBOL>|t=<D_FORMAT_SYMBOL>){return t;}}
    Token getSPECIAL_SYMBOLS(): {Token t=null;} {(t=<I_SPECIAL_SYMBOLS>|t=<D_SPECIAL_SYMBOLS>){return t;}}

    // "Standard" tokens. They are the same for all wikis.
    Token getURI(): {Token t=null;} {(t=<I_URI>|t=<D_URI>){return t;}}
    Token getNL(): {Token t=null;} {(t=<I_NL>|t=<D_NL>){return t;}}
    Token getSPACE(): {Token t=null;} {(t=<I_SPACE>|t=<D_SPACE>){return t;}}
    Token getWORD(): {Token t=null;} {(t=<I_WORD>|t=<D_WORD>){return t;}}
    Token getSPECIAL_SYMBOL(): {Token t=null;} {(t=<I_SPECIAL_SYMBOL>|t=<D_SPECIAL_SYMBOL>){return t;}}
// </getters>

void doParse():
{
    token_source.SwitchTo(token_source.INITIAL_CONTEXT);
}
{
    {
        fContext.beginDocument();
    }
    ( docElements() )*
    <EOF>
    {
        fContext.endDocument();
    }
}

void docElements():
{
}
{
    header() 
    |
    table() 
    |
    list()
    |
    verbatimBlock()
    |
    macroBlock()
    |
    horline()
    |
    ( LOOKAHEAD(2) 
        quot()
        |
        quotMacro()
        |
        paragraph()
    )
    | 
    emptyParagraph()
}

void header():
{
   Token t = null;
}
{
    t = getHEADER()
    {
        int level = t.image.trim().charAt(1) - '0';
        fContext.beginHeader(level);
    }
    (LOOKAHEAD(2) line())?
    {
        fContext.endHeader();
    }
}


void table():
{
   Token t = null;
   String str = "";
}
{
    {
        fContext.beginTable();
    }
    ( LOOKAHEAD(2) tableRow() )+
    {
        fContext.endTable();
    }
}

void tableRow():
{
    Token t = null;
    String str = null;
}
{
    t = getTABLE_ROW()
    {
        str = t.image.trim();
        fContext.beginTableRow(str.length() > 1);
        t = null;
    }
    ( LOOKAHEAD(2) block() )* 
    {
        fContext.endTableRow();
    }
}

void list():
{
}
{
    {
        fContext.beginList();
    }
    ( LOOKAHEAD(2) listItem() )+
    {
        fContext.endList();
    }
}

void listItem():
{
    Token t = null;
}
{
    (
        t = getLIST_ITEM()
        {
            fContext.beginListItem(t.image.trim());
        }
        (LOOKAHEAD(2) line())?
        {
            fContext.endListItem();
        }
    )
}

void block():
{
}
{
    ( line() | verbatimBlock() | macroBlock() )
}

void verbatimBlock():
{
    Token t = null;
}
{
    t = getVERBATIM_BLOCK()
    {
        String str = t.image.trim();
        str = str.substring(3, str.length() - 3);
        fContext.onVerbatim(str,  false);
    }
}

void macroBlock():
{
    Token t = null;
}
{
    t = getMACRO_EMPTY_BLOCK()
    {
        emptyMacro(t, true);
    }
    |
    t = getMACRO_BLOCK_START()
    {
        macro(t, true);
    }
}
void emptyMacro(Token t, boolean block):
{
}
{
    {
        String[] array = splitMacroParams(t.image);
        String name = array[0];
        String paramStr = array[1];
        String str = "";
        WikiParameters params = newMacroParameters(paramStr);
        if (block) {
            fContext.onMacroBlock(name, params, str);
        } else {
            fContext.onMacroInline(name, params, str);
        }        
    }
}
void macro(Token t, boolean block):
{
    StringBuffer buf = new StringBuffer();
    String name = "";
    WikiParameters params;
    String paramStr = "";
    int paramStrPos = -1;
    String str = null;
    boolean macro = false;
    String prevEnd = null;
}
{
    {
        String[] array = splitMacroParams(t.image);
        name = array[0];
        paramStr = array[1];
        str = "";
    }
    (LOOKAHEAD(2)
        (
              t = getINTERNAL_MACRO() { macro = true; }
            | t = getINTERNAL_MACRO_CONTENT() { macro = false; }
        )
        {
            if (prevEnd != null) {
                buf.append(prevEnd);
            }
            if (macro) {
                prevEnd = t.image;
            } else {
                prevEnd = null;
                str = WikiScannerUtil.unescape(t.image, '\\');
                buf.append(str);        
            }
        }
    )*
    {
        str = buf.toString();
        params = newMacroParameters(paramStr);
        if (block) {
            fContext.onMacroBlock(name, params, str);
        } else {
            fContext.onMacroInline(name, params, str);
        }
    }
}

void horline():
{
    Token t = null;
}
{
    t = getHORLINE()
    {
        fContext.onHorizontalLine();
    }
}

void paragraph():
{
    Token t = null;
    String str = "";
}
{
    {
        fContext.beginParagraph();
    }
    lines()
    {
        fContext.endParagraph();
    }
}

void quot():
{
    Token t = null;
    String str = "";
    WikiParameters params = WikiParameters.EMPTY;
}
{
    t = getQUOT_BLOCK()
    {
        str = t.image.trim();
        fContext.beginQuot(params);
    }
    quotLines()
    {
        fContext.endQuot();
    }
}

void quotMacro():
{
    Token t = null;
    String str = "";
    WikiParameters params = WikiParameters.EMPTY;
}
{
    t = getQUOT_BLOCK_MACRO()
    {
        str = t.image.trim();
        fContext.beginQuot(params);
    }
    quotLines()
    ( LOOKAHEAD(2) getQUOT_BLOCK_MACRO() )?
    {
        fContext.endQuot();
    }
}

void quotLines():
{
}
{
    (LOOKAHEAD(2) 
        (
            { fContext.beginQuotLine(1); } line() { fContext.endQuotLine(); }
            ( LOOKAHEAD(2)
                newLine()
                { fContext.beginQuotLine(1); } line() { fContext.endQuotLine(); }
            )*
        )
    )?
}

void emptyParagraph():
{
}
{
    getNL() (LOOKAHEAD(2) getNL() )*
} 


void lines():
{
}
{
    line()
    ( LOOKAHEAD(2)
        newLine()
        line()
    )*
}

void newLine():
{
}
{
    getNL()
    {
        fContext.onNewLine();
    }
}

void line():
{
    Token t = null;
    String str = null;
    WikiStyle style = null;
    char ch = 0;
}
{
    ( LOOKAHEAD(2)
        (
            t = getBR()
            {
                fContext.onLineBreak();
            }
            |
            t = getESCAPED()
            {
                fContext.onEscape("" + t.image.charAt(1));
            }
            |
            t = getWORD()
            {
                fContext.onWord(t.image);
            }
            |
            t = getSPACE()
            {
                fContext.onSpace(t.image);
            }
            |
            t = getSPECIAL_SYMBOLS() // see also getSPECIAL_SYMBOL() below 
            {
                fContext.onSpecialSymbol(t.image);
            }            
            |
            t = getFORMAT_SYMBOL()
            {
                str = t.image;
                ch = str.charAt(0);
                style = null;
                boolean checkStyleContext = false;
                switch (ch) {
                    case '{': 
                    case '}': 
                        style  = IWikiScannerContext.CODE;
                        break;
                    case '*': 
                        style  = IWikiScannerContext.STRONG;
                        break;
                    case '_': 
                        style  = IWikiScannerContext.EM;
                        break;
                    case '?': 
                        style  = IWikiScannerContext.CITE;
                        break;
                    case '^': 
                        style  = IWikiScannerContext.SUP;
                        break;
                    case '~': 
                        style  = IWikiScannerContext.SUB;
                        break;
                    case '+': 
                        // Underlined text was explicitly forbidden. 
                        // So replace it by TT.
                        style  = IWikiScannerContext.TT;
                        checkStyleContext = true;
                        break;
                    case '-': 
                        style  = IWikiScannerContext.STRIKE;
                        checkStyleContext = true;
                        break;
                }
                if (checkStyleContext) {
                    InlineState inlineState = fContext.getInlineState();
                    if (fContext.checkFormatStyle(style) 
                        || inlineState.check(InlineState.BEGIN)
                        || inlineState.check(InlineState.SPACE)
                        || inlineState.check(InlineState.NEW_LINE)) {
                        fContext.onFormat(style);
                    } else {
                        fContext.onSpecialSymbol(t.image);
                    }
                } else {
                    fContext.onFormat(style);
                }
            }
            |
            t = getSPECIAL_SYMBOL()
            {
                fContext.onSpecialSymbol(t.image);
            }
            |
            t = getVERBATIM_INLINE()
            {
                str = t.image.trim();
                str = str.substring(3, str.length() - 3);
                fContext.onVerbatim(str, true);
            }
            |
            t = getURI()
            {
                fContext.onReference(t.image.trim());
            }
            |
            t = getREFERENCE() 
            {
                str = t.image.trim();
                if (str.startsWith("!")) {
                   str = str.substring(1, str.length() - 1); 
                } else {
                    // TODO: split references to parts
                    str = str.substring(1, str.length() - 1);
                }
                WikiReference ref = fReferenceParser.parse(str);
                fContext.onReference(ref);
            }
            |
            t = getTABLE_CELL() 
            {
                if (fContext.isInTable()) {
                    str = t.image.trim();
                    fContext.onTableCell(str.length() > 1);
                } else {
                    fContext.onSpecialSymbol(t.image);
                }
            }
            |
            t = getMACRO_EMPTY_INLINE()
            {
                emptyMacro(t, false);
            }
            |
            t = getMACRO_INLINE_START() 
            {
                macro(t, false);
            }
        ) 
    )+
}
